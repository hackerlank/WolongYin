// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: role_table.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class RoleTable : Table.Binary, Table.IKey
{
	UInt32       m_role_id;
	Table.String m_name;
	Byte         m_level;
	Byte         m_role_type;
	Byte         m_role_subtype;
	UInt32       m_link_id;
	Table.String m_role_model;
	Table.String m_description;
	Table.String m_head_pic;
	UInt32       m_hp;
	UInt32       m_morale_atk;
	UInt32       m_critical_per;
	UInt32       m_critical_atk;
	UInt32       m_morale_def;
	UInt16       m_morale;
	UInt16       m_morale_charge;
	UInt16       m_crash_atk;
	UInt16       m_morale_res;
	UInt32       m_action_id;
	UInt16       m_role_ratio;
	Table.String m_AI;
	
	public const UInt32 Version = 3099312583;
	
	public UInt64 Key()
	{
		return m_role_id;
	}
	
	public UInt32 roleId
	{
		get { return m_role_id; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public Byte level
	{
		get { return m_level; }
	}
	
	public Byte roleType
	{
		get { return m_role_type; }
	}
	
	public Byte roleSubtype
	{
		get { return m_role_subtype; }
	}
	
	public UInt32 linkId
	{
		get { return m_link_id; }
	}
	
	public string roleModel
	{
		get { return m_role_model; }
	}
	
	public string description
	{
		get { return m_description; }
	}
	
	public string headPic
	{
		get { return m_head_pic; }
	}
	
	public UInt32 hp
	{
		get { return m_hp; }
	}
	
	public UInt32 moraleAtk
	{
		get { return m_morale_atk; }
	}
	
	public UInt32 criticalPer
	{
		get { return m_critical_per; }
	}
	
	public UInt32 criticalAtk
	{
		get { return m_critical_atk; }
	}
	
	public UInt32 moraleDef
	{
		get { return m_morale_def; }
	}
	
	public UInt16 morale
	{
		get { return m_morale; }
	}
	
	public UInt16 moraleCharge
	{
		get { return m_morale_charge; }
	}
	
	public UInt16 crashAtk
	{
		get { return m_crash_atk; }
	}
	
	public UInt16 moraleRes
	{
		get { return m_morale_res; }
	}
	
	public UInt32 actionId
	{
		get { return m_action_id; }
	}
	
	public UInt16 roleRatio
	{
		get { return m_role_ratio; }
	}
	
	public string aI
	{
		get { return m_AI; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_role_id).Load(ref m_name).Load(ref m_level).Load(ref m_role_type).Load(ref m_role_subtype).Load(ref m_link_id).Load(ref m_role_model).Load(ref m_description).Load(ref m_head_pic).Load(ref m_hp).Load(ref m_morale_atk).Load(ref m_critical_per).Load(ref m_critical_atk).Load(ref m_morale_def).Load(ref m_morale).Load(ref m_morale_charge).Load(ref m_crash_atk).Load(ref m_morale_res).Load(ref m_action_id).Load(ref m_role_ratio).Load(ref m_AI);
		return loader.Size;
	}
}

// source: role_table.xls, sheet: Sheet1
public sealed class RoleTableManager : Table.Manager<RoleTable>
{
	private static readonly RoleTableManager ms_instance = new RoleTableManager();
	
	private RoleTableManager()
	{
	}
	
	public static RoleTableManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "role_table.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, RoleTable.Version);
	}
	
	public RoleTable Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewRoleTable()
	{
		return new RoleTable();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(RoleTable), NewRoleTable);
	}
	#endregion
}

