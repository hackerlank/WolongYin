// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: role_table.prot

#ifndef _TDL_ROLE_TABLE_H_
#define _TDL_ROLE_TABLE_H_

#include "table_utility.h"

class RoleTable;
class RoleTableManager;


// ===================================================================
#pragma pack( 1 )
class RoleTable
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 3099312583;
	
	uint32 Key() const;
	
	uint32 role_id() const;
	const char* name() const;
	uint8 level() const;
	uint8 role_type() const;
	uint8 role_subtype() const;
	uint32 link_id() const;
	const char* role_model() const;
	const char* description() const;
	const char* head_pic() const;
	uint32 hp() const;
	uint32 morale_atk() const;
	uint32 critical_per() const;
	uint32 critical_atk() const;
	uint32 morale_def() const;
	uint16 morale() const;
	uint16 morale_charge() const;
	uint16 crash_atk() const;
	uint16 morale_res() const;
	uint32 action_id() const;
	uint16 role_ratio() const;
	const char* ai() const;
	
private:
	uint32 m_role_id;
	int    m_name;
	uint8  m_level;
	uint8  m_role_type;
	uint8  m_role_subtype;
	uint32 m_link_id;
	int    m_role_model;
	int    m_description;
	int    m_head_pic;
	uint32 m_hp;
	uint32 m_morale_atk;
	uint32 m_critical_per;
	uint32 m_critical_atk;
	uint32 m_morale_def;
	uint16 m_morale;
	uint16 m_morale_charge;
	uint16 m_crash_atk;
	uint16 m_morale_res;
	uint32 m_action_id;
	uint16 m_role_ratio;
	int    m_AI;
};
#pragma pack()

// -------------------------------------------------------------------
// source: role_table.xls, sheet: Sheet1
class RoleTableManager : public Table::Manager, public Singleton< RoleTableManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const RoleTable& Get( int index ) const;
	const RoleTable* Find( const uint32 key ) const;
	
private:
	friend class Singleton< RoleTableManager >;
	typedef Table::RepeatField< RoleTableManager, RoleTable >	RoleTableArray;
	
	RoleTableManager();
	~RoleTableManager();
	
private:
	const RoleTableArray *m_array;
};


// ===================================================================
// inline methords of RoleTable
inline uint32 RoleTable::Key() const
{
	return Combiner< uint32 >::Combine( m_role_id );
}

inline uint32 RoleTable::role_id() const
{
	return m_role_id;
}

inline const char* RoleTable::name() const
{
	return RoleTableManager::Instance().String( m_name );
}

inline uint8 RoleTable::level() const
{
	return m_level;
}

inline uint8 RoleTable::role_type() const
{
	return m_role_type;
}

inline uint8 RoleTable::role_subtype() const
{
	return m_role_subtype;
}

inline uint32 RoleTable::link_id() const
{
	return m_link_id;
}

inline const char* RoleTable::role_model() const
{
	return RoleTableManager::Instance().String( m_role_model );
}

inline const char* RoleTable::description() const
{
	return RoleTableManager::Instance().String( m_description );
}

inline const char* RoleTable::head_pic() const
{
	return RoleTableManager::Instance().String( m_head_pic );
}

inline uint32 RoleTable::hp() const
{
	return m_hp;
}

inline uint32 RoleTable::morale_atk() const
{
	return m_morale_atk;
}

inline uint32 RoleTable::critical_per() const
{
	return m_critical_per;
}

inline uint32 RoleTable::critical_atk() const
{
	return m_critical_atk;
}

inline uint32 RoleTable::morale_def() const
{
	return m_morale_def;
}

inline uint16 RoleTable::morale() const
{
	return m_morale;
}

inline uint16 RoleTable::morale_charge() const
{
	return m_morale_charge;
}

inline uint16 RoleTable::crash_atk() const
{
	return m_crash_atk;
}

inline uint16 RoleTable::morale_res() const
{
	return m_morale_res;
}

inline uint32 RoleTable::action_id() const
{
	return m_action_id;
}

inline uint16 RoleTable::role_ratio() const
{
	return m_role_ratio;
}

inline const char* RoleTable::ai() const
{
	return RoleTableManager::Instance().String( m_AI );
}


// inline methords of RoleTableManager
inline RoleTableManager::RoleTableManager()
	: m_array( NULL )
{
}

inline RoleTableManager::~RoleTableManager()
{
}

inline int RoleTableManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* RoleTableManager::Source() const
{
	return "role_table.tbl";
}

inline bool RoleTableManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const RoleTableArray *)data;
	return true;
}

inline bool RoleTableManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const RoleTableArray *)data;
	return true;
}

inline const RoleTable& RoleTableManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const RoleTable* RoleTableManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< RoleTable >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
