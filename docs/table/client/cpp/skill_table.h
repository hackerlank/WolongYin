// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: skill_table.prot

#ifndef _TDL_SKILL_TABLE_H_
#define _TDL_SKILL_TABLE_H_

#include "table_utility.h"

class SkillTable;
class SkillTableManager;


// ===================================================================
#pragma pack( 1 )
class SkillTable
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< SkillTableManager, int32 >	IDArrayStruct;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 2243660757;
	
	uint32 Key() const;
	
	uint32 baseid() const;
	const char* name() const;
	const char* describtion() const;
	uint16 lv_unlock() const;
	uint8 type() const;
	uint8 power_requst() const;
	const IDArrayStruct& attackdefs() const;
	uint8 target_type() const;
	uint8 hit_type() const;
	uint16 hit_count() const;
	
private:
	uint32        m_baseid;
	int           m_name;
	int           m_describtion;
	uint16        m_lv_unlock;
	uint8         m_type;
	uint8         m_power_requst;
	IDArrayStruct m_attackDefs;
	uint8         m_target_type;
	uint8         m_hit_type;
	uint16        m_hit_count;
};
#pragma pack()

// -------------------------------------------------------------------
// source: skill_table.xls, sheet: Sheet1
class SkillTableManager : public Table::Manager, public Singleton< SkillTableManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const SkillTable& Get( int index ) const;
	const SkillTable* Find( const uint32 key ) const;
	
private:
	friend class Singleton< SkillTableManager >;
	typedef Table::RepeatField< SkillTableManager, SkillTable >	SkillTableArray;
	
	SkillTableManager();
	~SkillTableManager();
	
private:
	const SkillTableArray *m_array;
};


// ===================================================================
// inline methords of SkillTable
inline uint32 SkillTable::Key() const
{
	return Combiner< uint32 >::Combine( m_baseid );
}

inline uint32 SkillTable::baseid() const
{
	return m_baseid;
}

inline const char* SkillTable::name() const
{
	return SkillTableManager::Instance().String( m_name );
}

inline const char* SkillTable::describtion() const
{
	return SkillTableManager::Instance().String( m_describtion );
}

inline uint16 SkillTable::lv_unlock() const
{
	return m_lv_unlock;
}

inline uint8 SkillTable::type() const
{
	return m_type;
}

inline uint8 SkillTable::power_requst() const
{
	return m_power_requst;
}

inline const SkillTable::IDArrayStruct& SkillTable::attackdefs() const
{
	return m_attackDefs;
}

inline uint8 SkillTable::target_type() const
{
	return m_target_type;
}

inline uint8 SkillTable::hit_type() const
{
	return m_hit_type;
}

inline uint16 SkillTable::hit_count() const
{
	return m_hit_count;
}


// inline methords of SkillTableManager
inline SkillTableManager::SkillTableManager()
	: m_array( NULL )
{
}

inline SkillTableManager::~SkillTableManager()
{
}

inline int SkillTableManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* SkillTableManager::Source() const
{
	return "skill_table.tbl";
}

inline bool SkillTableManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SkillTableArray *)data;
	return true;
}

inline bool SkillTableManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SkillTableArray *)data;
	return true;
}

inline const SkillTable& SkillTableManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const SkillTable* SkillTableManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< SkillTable >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
