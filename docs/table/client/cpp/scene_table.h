// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: scene_table.prot

#ifndef _TDL_SCENE_TABLE_H_
#define _TDL_SCENE_TABLE_H_

#include "table_utility.h"

class SceneTable;
class SceneTableManager;


// ===================================================================
#pragma pack( 1 )
class SceneTable
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< SceneTableManager, int32 >	PosStruct;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 2911362786;
	
	uint32 Key() const;
	
	uint32 baseid() const;
	const char* name() const;
	const char* name_suffix() const;
	const char* bgm() const;
	const char* loading_pic() const;
	const PosStruct& player_bornpos() const;
	uint32 player_angal() const;
	const PosStruct& enemy_bornpos() const;
	uint32 enemy_angal() const;
	const char* award_m() const;
	const char* award_n() const;
	const char* award_x() const;
	const char* award_y() const;
	uint32 enemy_1() const;
	uint32 enemy_2() const;
	uint32 enemy_3() const;
	uint32 enemy_4() const;
	uint32 enemy_5() const;
	uint32 enemy_6() const;
	
private:
	uint32    m_baseid;
	int       m_name;
	int       m_name_suffix;
	int       m_bgm;
	int       m_loading_pic;
	PosStruct m_player_bornpos;
	uint32    m_player_angal;
	PosStruct m_enemy_bornpos;
	uint32    m_enemy_angal;
	int       m_award_m;
	int       m_award_n;
	int       m_award_x;
	int       m_award_y;
	uint32    m_enemy_1;
	uint32    m_enemy_2;
	uint32    m_enemy_3;
	uint32    m_enemy_4;
	uint32    m_enemy_5;
	uint32    m_enemy_6;
};
#pragma pack()

// -------------------------------------------------------------------
// source: scene_table.xls, sheet: Scene
class SceneTableManager : public Table::Manager, public Singleton< SceneTableManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const SceneTable& Get( int index ) const;
	const SceneTable* Find( const uint32 key ) const;
	
private:
	friend class Singleton< SceneTableManager >;
	typedef Table::RepeatField< SceneTableManager, SceneTable >	SceneTableArray;
	
	SceneTableManager();
	~SceneTableManager();
	
private:
	const SceneTableArray *m_array;
};


// ===================================================================
// inline methords of SceneTable
inline uint32 SceneTable::Key() const
{
	return Combiner< uint32 >::Combine( m_baseid );
}

inline uint32 SceneTable::baseid() const
{
	return m_baseid;
}

inline const char* SceneTable::name() const
{
	return SceneTableManager::Instance().String( m_name );
}

inline const char* SceneTable::name_suffix() const
{
	return SceneTableManager::Instance().String( m_name_suffix );
}

inline const char* SceneTable::bgm() const
{
	return SceneTableManager::Instance().String( m_bgm );
}

inline const char* SceneTable::loading_pic() const
{
	return SceneTableManager::Instance().String( m_loading_pic );
}

inline const SceneTable::PosStruct& SceneTable::player_bornpos() const
{
	return m_player_bornpos;
}

inline uint32 SceneTable::player_angal() const
{
	return m_player_angal;
}

inline const SceneTable::PosStruct& SceneTable::enemy_bornpos() const
{
	return m_enemy_bornpos;
}

inline uint32 SceneTable::enemy_angal() const
{
	return m_enemy_angal;
}

inline const char* SceneTable::award_m() const
{
	return SceneTableManager::Instance().String( m_award_m );
}

inline const char* SceneTable::award_n() const
{
	return SceneTableManager::Instance().String( m_award_n );
}

inline const char* SceneTable::award_x() const
{
	return SceneTableManager::Instance().String( m_award_x );
}

inline const char* SceneTable::award_y() const
{
	return SceneTableManager::Instance().String( m_award_y );
}

inline uint32 SceneTable::enemy_1() const
{
	return m_enemy_1;
}

inline uint32 SceneTable::enemy_2() const
{
	return m_enemy_2;
}

inline uint32 SceneTable::enemy_3() const
{
	return m_enemy_3;
}

inline uint32 SceneTable::enemy_4() const
{
	return m_enemy_4;
}

inline uint32 SceneTable::enemy_5() const
{
	return m_enemy_5;
}

inline uint32 SceneTable::enemy_6() const
{
	return m_enemy_6;
}


// inline methords of SceneTableManager
inline SceneTableManager::SceneTableManager()
	: m_array( NULL )
{
}

inline SceneTableManager::~SceneTableManager()
{
}

inline int SceneTableManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* SceneTableManager::Source() const
{
	return "scene_table.tbl";
}

inline bool SceneTableManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SceneTableArray *)data;
	return true;
}

inline bool SceneTableManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SceneTableArray *)data;
	return true;
}

inline const SceneTable& SceneTableManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const SceneTable* SceneTableManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< SceneTable >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
