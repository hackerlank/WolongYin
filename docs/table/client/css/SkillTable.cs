// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: skill_table.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class SkillTable : Table.Binary, Table.IKey
{
	#region IDArrayStruct
	public class IDArrayStruct : Table.Binary
	{
		List<Int32> m_list;
		
		public List<Int32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32        m_baseid;
	Table.String  m_name;
	Table.String  m_describtion;
	UInt16        m_lv_unlock;
	Byte          m_type;
	Byte          m_power_requst;
	IDArrayStruct m_attackDefs;
	Byte          m_target_type;
	Byte          m_hit_type;
	UInt16        m_hit_count;
	
	public const UInt32 Version = 2243660757;
	
	public UInt64 Key()
	{
		return m_baseid;
	}
	
	public UInt32 baseid
	{
		get { return m_baseid; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public string describtion
	{
		get { return m_describtion; }
	}
	
	public UInt16 lvUnlock
	{
		get { return m_lv_unlock; }
	}
	
	public Byte type
	{
		get { return m_type; }
	}
	
	public Byte powerRequst
	{
		get { return m_power_requst; }
	}
	
	public IDArrayStruct attackDefs
	{
		get { return m_attackDefs; }
	}
	
	public Byte targetType
	{
		get { return m_target_type; }
	}
	
	public Byte hitType
	{
		get { return m_hit_type; }
	}
	
	public UInt16 hitCount
	{
		get { return m_hit_count; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_baseid).Load(ref m_name).Load(ref m_describtion).Load(ref m_lv_unlock).Load(ref m_type).Load(ref m_power_requst).Load(ref m_attackDefs).Load(ref m_target_type).Load(ref m_hit_type).Load(ref m_hit_count);
		return loader.Size;
	}
}

// source: skill_table.xls, sheet: Sheet1
public sealed class SkillTableManager : Table.Manager<SkillTable>
{
	private static readonly SkillTableManager ms_instance = new SkillTableManager();
	
	private SkillTableManager()
	{
	}
	
	public static SkillTableManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "skill_table.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, SkillTable.Version);
	}
	
	public SkillTable Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewSkillTable()
	{
		return new SkillTable();
	}
	public static object NewSkillTableIDArrayStruct()
	{
		return new SkillTable.IDArrayStruct();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(SkillTable), NewSkillTable);
		Table.NewHelper.Register(typeof(SkillTable.IDArrayStruct), NewSkillTableIDArrayStruct);
	}
	#endregion
}

